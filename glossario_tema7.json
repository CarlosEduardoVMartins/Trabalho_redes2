[{"term":"Criptografia","definition":"Usar protocolos como TLS/SSL para criptografar os dados transmitidos, garantindo \nque apenas os destinatários autorizados possam decifrá-los."},{"term":"Autenticação","definition":"Implementar mecanismos de autenticação, como senhas, tokens ou certificados, \npara garantir que apenas usuários autorizados tenham acesso à comunicação."},{"term":"Firewalls","definition":"Configurar firewalls para controlar o tráfego de entrada e saída, permitindo apenas o \ntráfego autorizado e bloqueando ameaças potenciais."},{"term":"VPN (Rede Privada Virtual)","definition":"Usar VPNs para criar túneis de comunicação segura por meio de redes \npúblicas, protegendo os dados de interceptação."},{"term":"Controle de acesso","definition":"Implementar políticas de controle de acesso para determinar quem pode \niniciar ou participar de conexões TCP ou UDP."},{"term":"Monitoramento de segurança","definition":"Utilizar ferramentas de monitoramento de segurança para detectar \ne responder a ameaças em tempo real."},{"term":"Avaliar o desempenho de aplicativos usando TCP ou UDP","definition":"Avaliar o desempenho de aplicativos que usam TCP ou UDP envolve medir diversos aspectos, como \nlatência, taxa de transferência e impacto na qualidade do serviço (QoS)."},{"term":"Diagnóstico de problemas de rede relacionados ao TCP e UDP","definition":"Para diagnosticar esses problemas, é importante utilizar ferramentas como o `ping` e o `traceroute` \npara testar a conectividade e identificar pontos de falha na rede. Para problemas específicos de \naplicativos, a análise de logs e o uso de ferramentas de monitoramento de rede são essenciais."},{"term":"Configurar e gerenciar sockets TCP e UDP em aplicações","definition":"Para configurar e gerenciar sockets TCP, os \ndesenvolvedores precisam estabelecer uma conexão \nutilizando funções como `socket()`, `bind()`, `listen()` e `accept()`. Eles também devem implementar \na lógica de envio e recebimento de dados usando `send()` e `recv()`.\n No caso de sockets UDP, os desenvolvedores criam sockets usando \n`socket()` e usam `sendto()` e \n`recvfrom()` para enviar e receber datagramas UDP. É importante lembrar que, ao contrário do TCP, \nnão é necessário estabelecer uma conexão prévia."},{"term":"Protocolo UDP","definition":"O UDP é um protocolo que não é confiável, pois ele só envia os dados para o host de destino, por \nexemplo ele embala os datagramas e simplesmente envia, sem pedir confirmação de pacote ou \nverificar erros nos pacotes."},{"term":"Protocolo TCP","definition":"O protocolo TCP tem como característica ter uma transmissão confiável ponto-a-ponto, ou seja, se o \n{Computador (A) transmitir dados para o computador (B), será necessário \nenviar um ACK (Bit de \nReconhecimento) para o computador (B), possibilitando a recuperação dos pacotes, rejeitando os \npacotes duplicados e organizando os pacotes que forem chegando."},{"term":"1° Etapa da comunicação com TCP","definition":"O Cliente envia o \nSYN (Uma solicitação de conexão, no qual possui um sequencial de \nbytes para Cliente-Servidor);"},{"term":"2° Etapa da comunicação com TCP","definition":"O Servidor aceita o pedido de conexão (SYN), e envia um pacote aceitando o pedido \n(ACK), no qual possui um sequencial de bytes para Servidor-Cliente;"},{"term":"3° Etapa da comunicação com TCP","definition":"O Destino (servidor) transmite o ACK permitindo o SYN, então a troca de informações \né efetuada entre esses hosts, quando se encerra a conexão, tanto o cliente ou servidor podem \nfinalizar a conexão, um dos dois pode enviar o pacote FIN (Fim da conexão), quando se recebe o FIN \na máquina envia um ACK aceitando o fim da conexão e algum tempo depois (milésimos de \nsegundos) ele envia o FIN, finalizando de fato a conexão."}]